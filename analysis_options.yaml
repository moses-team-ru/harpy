linter:
  rules:
    always_use_package_imports: true
    avoid_dynamic_calls: false
    avoid_empty_else: true
    avoid_relative_lib_imports: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_web_libraries_in_flutter: true
    close_sinks: true
    avoid_print: true
    comment_references: true
    diagnostic_describe_all_properties: false
    secure_pubspec_urls: true
    depend_on_referenced_packages: false
    use_to_and_as_if_applicable: true
    use_test_throws_matchers: true
    use_super_parameters: true
    use_string_buffers: true
    use_setters_to_change_properties: true
    use_rethrow_when_possible: true
    use_raw_strings: true
    unnecessary_raw_strings: true
    use_late_for_private_fields_and_variables: true
    use_is_even_rather_than_modulo: true
    use_if_null_to_convert_nulls_to_bools: true
    use_function_type_syntax_for_parameters: true
    use_full_hex_values_for_flutter_colors: true
    use_enums: true
    use_colored_box: true
    use_decorated_box: true
    unnecessary_this: true
    unnecessary_string_escapes: true
    unnecessary_parenthesis: true
    unnecessary_overrides: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_null_checks: true
    unnecessary_null_aware_assignments: true
    unnecessary_new: true
    unnecessary_late: true
    unnecessary_lambdas: true
    unnecessary_getters_setters: true
    unnecessary_final: false
    unnecessary_const: false
    unnecessary_constructor_name: true
    unnecessary_brace_in_string_interps: true
    unnecessary_await_in_return: true
    unawaited_futures: true
    type_init_formals: true
    type_annotate_public_apis: true
    tighten_type_of_initializing_formals: true
    sort_unnamed_constructors_first: true
    sort_constructors_first: true
    sort_child_properties_last: true
    slash_for_doc_comments: true
    sized_box_shrink_expand: true
    sized_box_for_whitespace: true
    require_trailing_commas: false
    recursive_getters: true
    public_member_api_docs: true
    provide_deprecation_message: true
    prefer_typing_uninitialized_variables: true
    prefer_spread_collections: true
    prefer_null_aware_operators: true
    prefer_null_aware_method_calls: true
    prefer_mixin: true
    prefer_iterable_whereType: true
    prefer_is_not_operator: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_interpolation_to_compose_strings: true
    prefer_int_literals: true
    prefer_inlined_adds: true
    prefer_initializing_formals: true
    prefer_if_null_operators: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_generic_function_type_aliases: true
    prefer_function_declarations_over_variables: true
    prefer_foreach: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_final_parameters: false
    prefer_final_locals: true
    prefer_final_in_for_each: true
    prefer_final_fields: true
    prefer_expression_function_bodies: true
    prefer_double_quotes: false
    prefer_single_quotes: true
    prefer_contains: true
    prefer_constructors_over_static_methods: true
    prefer_const_declarations: true
    prefer_const_constructors_in_immutables: true
    prefer_const_constructors: true
    prefer_conditional_assignment: true
    prefer_collection_literals: true
    prefer_asserts_with_message: true
    prefer_asserts_in_initializer_lists: true
    prefer_adjacent_string_concatenation: true
    parameter_assignments: true
    package_prefixed_library_names: true
    overridden_fields: true
    only_throw_errors: true
    one_member_abstracts: true
    omit_local_variable_types: false
    null_closures: true
    null_check_on_nullable_type_parameter: true
    noop_primitive_operations: true
    no_runtimeType_toString: true
    no_leading_underscores_for_local_identifiers: true
    no_leading_underscores_for_library_prefixes: true
    no_default_cases: true
    missing_whitespace_between_adjacent_strings: true
    library_names: true
    library_prefixes: true
    library_private_types_in_public_api: true
    leading_newlines_in_multiline_strings: true
    join_return_with_assignment: true
    implementation_imports: true
    file_names: true
    exhaustive_cases: true
    eol_at_end_of_file: true
    empty_constructor_bodies: true
    empty_catches: true
    directives_ordering: true
    do_not_use_environment: true
    deprecated_consistency: true
    constant_identifier_names: true
    curly_braces_in_flow_control_structures: true
    conditional_uri_does_not_exist: true
    cascade_invocations: true
    camel_case_types: true
    cast_nullable_to_non_nullable: true
    camel_case_extensions: true
    await_only_futures: true
    avoid_void_async: true
    avoid_unused_constructor_parameters: true
    avoid_unnecessary_containers: true
    avoid_types_on_closure_parameters: false
    avoid_single_cascade_in_expression_statements: true
    avoid_shadowing_type_parameters: true
    avoid_setters_without_getters: true
    avoid_returning_this: true
    avoid_returning_null_for_void: true
    avoid_return_types_on_setters: true
    avoid_renaming_method_parameters: true
    avoid_redundant_argument_values: true
    avoid_private_typedef_functions: true
    avoid_positional_boolean_parameters: false
    avoid_null_checks_in_equality_operators: true
    avoid_multiple_declarations_per_line: true
    avoid_js_rounded_ints: true
    avoid_init_to_null: true
    avoid_implementing_value_types: true
    avoid_function_literals_in_foreach_calls: true
    avoid_final_parameters: true
    avoid_field_initializers_in_const_classes: true
    avoid_escaping_inner_quotes: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_double_and_int_checks: true
    avoid_classes_with_only_static_members: true
    avoid_catching_errors: true
    avoid_catches_without_on_clauses: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_annotating_with_dynamic: true
    annotate_overrides: true
    always_specify_types: true
    always_put_required_named_parameters_first: true
    always_put_control_body_on_new_line: false
    always_declare_return_types: true
    valid_regexps: true
    use_key_in_widget_constructors: true
    use_build_context_synchronously: true
    prefer_void_to_null: true
    throw_in_finally: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    no_logic_in_create_state: true
    no_duplicate_case_values: true
    no_adjacent_strings_in_list: true
    literal_only_boolean_expressions: true
    collection_methods_unrelated_type: true
    hash_and_equals: true
    empty_statements: true
    control_flow_in_finally: true
    cancel_subscriptions: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  errors:
    always_specify_types: ignore
    invalid_annotation_target: ignore
    todo: ignore # to remove this param if warnings are needed
  exclude: [build/**, lib/**.freezed.dart, lib/**.g.dart, lib/generated/**, lib/firebase_options.dart]

dart_code_metrics:
  rules:
    # Show potential errors
    - avoid-cascade-after-if-null
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
    - avoid-dynamic
    - avoid-missing-enum-constant-in-map
    - avoid-passing-async-when-sync-expected
    - avoid-throw-in-catch-block
    - avoid-unused-parameters
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    - no-empty-block
    - no-equal-then-else
    - prefer-correct-test-file-name
    - prefer-match-file-name
    - prefer-return-await
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowing
    - prefer-iterable-of
    - no-equal-switch-case
    - no-equal-conditions
    - avoid-equal-expressions
    - avoid-missed-calls
    - avoid-unnecessary-negations
    - avoid-unused-generics
    - function-always-returns-null
    - avoid-throw-objects-without-tostring
    - avoid-unsafe-collection-methods
    - prefer-wildcard-pattern
    - no-equal-switch-expression-cases
    - avoid-future-tostring
    - avoid-nested-futures
    - avoid-generics-shadowing
    - prefer-parentheses-with-if-null
    - no-equal-nested-conditions
    - avoid-shadowed-extension-methods
    - avoid-unnecessary-conditionals
    - avoid-double-slash-imports
    - avoid-map-keys-contains
    - prefer-correct-json-casts
    - avoid-duplicate-mixins
    - avoid-nullable-interpolation
    - avoid-unused-instances
    - prefer-correct-for-loop-increment
    - prefer-public-exception-classes
    - avoid-uncaught-future-errors
    - always-remove-listener
    - avoid-unnecessary-setstate
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - use-setstate-synchronously
    - avoid-incomplete-copy-with
    - proper-super-calls
    - dispose-fields
    - avoid-empty-setstate
    - avoid-state-constructors
    - avoid-recursive-widget-calls
    - avoid-missing-image-alt
    - avoid-passing-self-as-argument
    - avoid-unnecessary-if
    - avoid-unconditional-break
    - avoid-referencing-discarded-variables
    # Enable with the next release
    # - avoid-unnecessary-late
    # - avoid-wildcard-cases-with-enums
    # - match-getter-setter-field-names
    # - avoid-accessing-collections-by-constant-index

    # Code simplification
    - avoid-redundant-async
    - avoid-redundant-else
    - avoid-unnecessary-nullable-return-type
    - avoid-redundant-pragma-inline
    - avoid-nested-records
    - avoid-redundant-positional-field-name
    - avoid-explicit-pattern-field-name
    - prefer-simpler-patterns-null-check
    - avoid-unnecessary-return
    - avoid-duplicate-patterns
    - avoid-keywords-in-wildcard-pattern
    - avoid-unnecessary-futures
    - avoid-unnecessary-reassignment
    - avoid-unnecessary-call
    - avoid-unnecessary-stateful-widgets
    - prefer-dedicated-media-query-methods
    - avoid-unnecessary-overrides-in-state
    - move-variable-closer-to-its-usage
    # - avoid-unnecessary-getter
    # - avoid-nullable-parameters-with-default-values

    # Style
    - prefer-trailing-comma
    - unnecessary-trailing-comma
    - prefer-declaring-const-constructor
    - prefer-single-widget-per-file
